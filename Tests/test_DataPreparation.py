from unittest import TestCase

from Domain import DataPreparation
from Domain.DataPreparation import DataPreparation

from Tests.StubDBAccess import StubDBAccess


class TestDataPreparation(TestCase):
    def setUp(self):
        self.dir_path = 'TestData/directories'
        self.dataPreparation = DataPreparation()
        self.dataPreparation.db = StubDBAccess()
        self.dataPreparation.DS_FOLDER = self.dir_path

    def test_create_data_directories(self):
        dataset_path = self.dataPreparation.get_csv_with_prepared_data({}, 'weather', ['summer', 'winter', 'spring'])
        with open(dataset_path, 'r') as file:
            prepared_data = file.readlines()
            print(prepared_data)
            self.assertEqual(prepared_data, ['3,360,summer,winter,spring\n',
                                             '-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,spring\n',
                                             '-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,summer\n',
                                             '-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,-1.75,7.45,29.5,winter\n']
)
        self.dataPreparation.clear_data_folder()


    # @mock.patch('DBCommunication1.DBAccess.DBAccess.getInstance')
    # @mock.patch('DBCommunication1.DBAccess.DBAccess.fetch_flights')
    # def test_create_data_directories(self, mock_fetch_flights, mock_getInstance):
    #     mock_fetch_flights.return_value = [{'flle_name': 'log1.log', 'weather': 'summer'}]
    #     mock_getInstance.return_value = 'instance'
    #     # mock_fetch_flights.fetch_flights.return_value = [{'flle_name': 'log1.log', 'weather': 'summer'}]
    #     self.assertEqual(DBAccess.getInstance(), 'instance')
    #     self.assertEqual(DBAccess.getInstance().fetch_flights(), [{'flle_name': 'log1.log', 'weather': 'summer'}])
    #     # self.assertEqual(DBAccess.getInstance().fetch_flights(), [{'flle_name': 'log1.log', 'weather': 'summer'}])
    #     # DataPreparation.create_data_directories({}, 'weather', ['summer', 'winter', 'spring'])


    def test_isfloat(self):
        self.assertFalse(self.dataPreparation.isfloat("string"))
        self.assertTrue(self.dataPreparation.isfloat(0))
        self.assertTrue(self.dataPreparation.isfloat(2.4))

    def test_feature_padding(self):
        padding_size = 10
        too_small_list = []
        list = [1, 2, 3, 4, 5]
        with self.assertRaises(Exception) as context:
            self.dataPreparation.feature_padding(too_small_list, padding_size)
        self.assertEqual('feature_padding: features length is too small', context.exception.__str__())
        self.assertEqual(self.dataPreparation.feature_padding(list, padding_size),
                         [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3, 4, 5, 3])

    def test_fix_features_size(self):
        size = 10
        big_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        small_list = [1, 2, 3, 4, 5]
        self.assertEqual(self.dataPreparation.fix_features_size(big_list, size),
                         [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        self.assertEqual(self.dataPreparation.fix_features_size(small_list, size),
                         [1, 2, 3, 4, 5, 3, 4, 5, 3, 4])


    def test_split_to_train_test_from_csv(self):
        dataset_path = './TestData/dataset.csv'
        X_train, y_train, X_test, y_test = self.dataPreparation.split_to_train_test_from_csv(dataset_path)
        self.assertEqual(X_train.shape, (4, 1, 360))
        self.assertEqual(y_train.shape, (4,))
        self.assertEqual(X_test.shape, (1, 1, 360))
        self.assertEqual(y_test.shape, (1,))
        print(y_test.shape)

